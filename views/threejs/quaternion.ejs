<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>three.js Cube</title>
    <script type="text/javascript" src="/javascripts/three.js"></script>
</head>
<body>
<p>
  Available KeyPress: 1/2/3/4/5/6
</p>
<script>
  // Refer: http://www.dfx.co.jp/dftalk/?p=13407

  // シーンの作成 ------------------------------------------
  var scene = new THREE.Scene();

  // カメラの作成 ------------------------------------------
  // fov: 画角(視野角)
  var fov = 75;

  var height = 600; // 縦幅
  var width = 400; // 横幅
  // aspect: アスペクト比、カメラで撮影したものの縦横比
  var aspect = height/width;

  // near： ニアークリップ、 カメラからの撮影開始位置、これより近いものは撮影しない
  var near = 1;
  // far: ファークリップ カメラからの撮影終了位置、これより遠いものは撮影しない
  var far = 1000;

  // カメラ作成
  var camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  // カメラ配置
  camera.position.set(0, 15, 70); // (x, y, z)

  // レンダラーの追加 ----------------------------------------
  var renderer = new THREE.WebGLRenderer();
  renderer.setSize(height, width); // Canvasのサイズ設定
  document.body.appendChild(renderer.domElement);

  // ライティングを設定する ------------------------------------------
  var color = 'white'; // 光の色
  // ライトオブジェクトの作成
  var directionalLight = new THREE.DirectionalLight(color);
  directionalLight.position.set(0, 7, 10); // 光源の角度を設定
  scene.add(directionalLight); // シーンに追加

  // 物体を追加する ----------------------------------------
  // ジオメトリーの作成
  var geometry = new THREE.CubeGeometry(20, 20, 20); // サイズ設定（x, y, z）
  // マテリアルの作成
  var material = new THREE.MeshPhongMaterial({color: 'orange'});
  // メッシュの作成
  cube = new THREE.Mesh(geometry, material);
  cube.position.set(0, 0, 0);  // 位置を設定(x, y, z)
  scene.add(cube); // シーンに追加

  //camera.rotation.order = "XYZ";

  window.onkeydown = function(e) {
    console.log('onkeydown', e.key);

    if (e.key == 1) {
      camera.rotation.y += 0.1;

    } else if (e.key == 2) {
      camera.rotation.y -= 0.1;

    } else if (e.key == 3) {
      camera.rotation.x += 0.1;

    } else if (e.key == 4) {
      camera.rotation.x -= 0.1;

    } else if (e.key == 5) {
      var quaternion = camera.quaternion;
      var target = new THREE.Quaternion();
      var axis = new THREE.Vector3(0, 1, 0).normalize();
      target.setFromAxisAngle(axis, 15 * Math.PI / 180);
      quaternion.multiply(target);

    } else if (e.key == 6) {
      var quaternion = camera.quaternion;
      var target = new THREE.Quaternion();
      var axis = new THREE.Vector3(0, 1, 0).normalize();
      target.setFromAxisAngle(axis, -15 * Math.PI / 180);
      quaternion.multiply(target);

    } else if (e.key == 7) {
      //「上」方向のベクトルを生成。サンプルでは「空」方向。
      var up = new THREE.Vector3(0, 1, 0);

      //法線ベクトルを取得。サンプルではinput要素から取得。
      var val = 15 * Math.PI / 180;
      var normalAxis = new THREE.Vector3(0, 0.5, 0).normalize();

      //回転軸用のベクトルを生成
      var dir = new THREE.Vector3();

      //「上」方向と法線ベクトルとの外積を計算。正規化。
      dir.crossVectors(up, normalAxis).normalize();

      //上記ベクトルとの内積（cosθ）
      var dot = up.dot(normalAxis);// / (up.length() * normalAxis.length());

      //acos関数を使ってラジアンに変換。
      var rad = Math.acos(dot);

      //クォータニオンオブジェクトを生成
      var q = new THREE.Quaternion();

      //計算した回転軸と角度を元にクォータニオンをセットアップ
      q.setFromAxisAngle(dir, rad);

      //適用したいオブジェクトに回転を適用
      //mesh.rotation.setFromQuaternion(q);
      camera.rotation.setFromQuaternion(q);
      //camera.quaternion.multiply(q);
    }
  };

  // レンダリング ----------------------------------------
  function render() {
    requestAnimationFrame(render);

    // シーンとカメラを渡してレンダリング
    renderer.render(scene, camera);
  }
  render();
</script>
</body>
</html>

