<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>three.js Load .obj file</title>
    <style>
      body {
        font-family: Monospace;
        background-color: #000;
        color: #fff;
        margin: 0px;
        overflow: hidden;
      }
      #info {
        color: #fff;
        position: absolute;
        top: 10px;
        width: 100%;
        text-align: center;
        z-index: 100;
        display:block;
      }
      #info a, .button { color: #f00; font-weight: bold; text-decoration: underline; cursor: pointer }
    </style>
    <script type="text/javascript" src="/javascripts/threejs_r86/three.js"></script>
    <script type="text/javascript" src="/javascripts/OBJLoader.js"></script>
  </head>
  <body>
    <script>
      // Refer: http://threejs.org/examples/#webgl_loader_obj

      var container;

      var camera, scene, renderer;

      var mouseX = 0, mouseY = 0;

      var windowHalfX = window.innerWidth / 2;
      var windowHalfY = window.innerHeight / 2;


      init();
      animate();


      function init() {

        container = document.createElement( 'div' );
        document.body.appendChild( container );

        camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
        //camera.position.z = 250;
        camera.position.z = 5;

        // scene

        scene = new THREE.Scene();

        var ambient = new THREE.AmbientLight( 0x101030 );
        scene.add( ambient );

        var directionalLight = new THREE.DirectionalLight( 0xffeedd );
        directionalLight.position.set( 0, 0, 1 );
        scene.add( directionalLight );

        // texture

        var manager = new THREE.LoadingManager();
        manager.onProgress = function ( item, loaded, total ) {

          console.log( item, loaded, total );

        };

        var texture = new THREE.Texture();

        var onProgress = function ( xhr ) {
          if ( xhr.lengthComputable ) {
            var percentComplete = xhr.loaded / xhr.total * 100;
            console.log( Math.round(percentComplete, 2) + '% downloaded' );
          }
        };

        var onError = function ( xhr ) {
        };


//        var loader = new THREE.ImageLoader( manager );
//        loader.load( 'textures/UV_Grid_Sm.jpg', function ( image ) {
//
//          texture.image = image;
//          texture.needsUpdate = true;
//
//        } );

        var material = new THREE.MeshPhongMaterial({color: 'orange'});

        // model

        var file = '/geometrics/sphere.obj';
        //var file = '/geometrics/sphere_top.obj';
        //var file = '/geometrics/half_sphere.obj';
        //var file = '/geometrics/cubic_3d_sbs.obj';
        //var file = '/geometrics/cubic_3d_stack.obj';
        var loader = new THREE.OBJLoader( manager );
        loader.load( file, function ( object ) {

          object.traverse( function ( child ) {

            if ( child instanceof THREE.Mesh ) {

              //child.material.map = texture;
              child.material = material;

            }

          } );

          //object.position.y = - 95;
          object.scale.set(0.1, 0.1, 0.1);
          scene.add( object );

        }, onProgress, onError );

        //

        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        container.appendChild( renderer.domElement );

        document.addEventListener( 'mousemove', onDocumentMouseMove, false );

        //

        window.addEventListener( 'resize', onWindowResize, false );

      }

      function onWindowResize() {

        windowHalfX = window.innerWidth / 2;
        windowHalfY = window.innerHeight / 2;

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

      }

      function onDocumentMouseMove( event ) {

        mouseX = ( event.clientX - windowHalfX ) / 2;
        mouseY = ( event.clientY - windowHalfY ) / 2;

      }

      //

      function animate() {

        requestAnimationFrame( animate );
        render();

      }

      function render() {

        camera.position.x += ( mouseX - camera.position.x ) * .05;
        camera.position.y += ( - mouseY - camera.position.y ) * .05;

        camera.lookAt( scene.position );

        renderer.render( scene, camera );

      }
    </script>
  </body>
</html>

