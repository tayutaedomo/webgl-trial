<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>three.js Canvas</title>
  <script type="text/javascript" src="/javascripts/three.js"></script>
</head>
<body>
<p>
  Refer: <a href="http://ziyudom.com/threejs-stagecanvasanimation/" target="_blank">http://ziyudom.com/threejs-stagecanvasanimation/</a>
</p>

<form style="margin-bottom: 10px;">
  Font Family:
  <select id="font_family">
    <option value="Arial, Helvetica, sans-serif">Arial, Helvetica, sans-serif</option>
    <option value="Arial Black, Gadget, sans-serif">Arial Black, Gadget, sans-serif</option>
    <option value="Comic Sans MS, cursive, sans-serif">Comic Sans MS, cursive, sans-serif</option>
    <option value="Courier New, Courier, monospace">Courier New, Courier, monospace</option>
    <option value="Georgia, serif">Georgia, serif</option>
    <option value="Impact, Charcoal, sans-serif">Impact, Charcoal, sans-serif</option>
    <option value="Tahoma, Geneva, sans-serif">Tahoma, Geneva, sans-serif</option>
    <option value="Times New Roman, Times, serif">Times New Roman, Times, serif</option>
    <option value="Trebuchet MS, Helvetica, sans-serif">Trebuchet MS, Helvetica, sans-serif</option>
    <option value="Verdana, Geneva, sans-serif">Verdana, Geneva, sans-serif</option>
  </select>

  Text: <input id="text" type="text" value="札幌">
  Font Size: <input id="font_size" type="number" value="14">
  Canvas Up Scale: <input id="canvas_scale" type="number" value="5">
  Texture Down Scale: <input id="texture_scale" type="number" value="10">

  Filter:
  <select id="filter">
    <option value=""></option>
    <option value="LinearFilter">LinearFilter</option>
    <option value="NearestFilter">NearestFilter</option>
  </select>

  <button type="button" onclick="update()">Update</button>
</form>

<script>
  var scene = new THREE.Scene();

  var fov = 75;

  var height = 600;
  var width = 400;
  var aspect = height/width;

  var near = 1;
  var far = 1000;

  var camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  camera.position.set(0, 15, 70);

  var renderer = new THREE.WebGLRenderer();
  renderer.setSize(height, width);
  document.body.appendChild(renderer.domElement);

  var color = 'white';
  var directionalLight = new THREE.DirectionalLight(color);
  directionalLight.position.set(0, 7, 10);
  scene.add(directionalLight);

  function createCanvas(text, size, font_family, scale) {
    var font_size = size * scale;
    var width = text.length * 2 * font_size;
    var height = font_size * 1.3;

    var canvas = document.createElement('canvas');

    canvas.width = width;
    canvas.height = height;

    var context = canvas.getContext('2d');

    context.font = font_size + "px " + font_family;
    context.fillStyle = 'red';
    context.textAlign = 'center';
    context.textBaseline = 'top';
    context.fillText(text, width / 2, 0);

    console.log('createCanvas', context);
    document.body.appendChild(canvas);

    return canvas;
  }

  function update() {
    var text = document.getElementById('text').value;
    var font_size = parseInt(document.getElementById('font_size').value);
    var font_family = document.getElementById('font_family').value;

    var canvas_scale = parseInt(document.getElementById('canvas_scale').value);
    var texture_scale = parseInt(document.getElementById('texture_scale').value);

    var filter = document.getElementById('filter').value;

    var canvas = createCanvas(text, font_size, font_family, canvas_scale);

    var geometry = new THREE.PlaneGeometry(
      canvas.width / texture_scale, canvas.height / texture_scale, 1, 1);

    var texture = new THREE.CanvasTexture(canvas);

    if (filter == 'LinearFilter') {
      texture.minFilter = THREE.LinearFilter;
    } else if (filter == 'NearestFilter') {
      texture.minFilter = THREE.NearestFilter;
    }

    var material = new THREE.MeshBasicMaterial({ map: texture, color: 'orange' });

    var plane = new THREE.Mesh(geometry, material);

    plane.position.set(0, 0, 0);

    scene.add(plane);
  }
  update();

  function render() {
    requestAnimationFrame(render);
    renderer.render(scene, camera);
  }

  render();
</script>
</body>
</html>

