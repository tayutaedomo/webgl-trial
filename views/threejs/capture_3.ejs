<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>three.js Capture</title>
  <script type="text/javascript" src="/javascripts/threejs_r86/three.js"></script>
  <script type="text/javascript" src="/javascripts/threejs_r86/examples/CubemapToEquirectangular.js"></script>
</head>
<body>
<div>
  <p>
    Use: <a href="https://github.com/spite/THREE.CubemapToEquirectangular" target="_blank">https://github.com/spite/THREE.CubemapToEquirectangular</a>
  </p>

  <button onclick="capture()">Capture</button>
</div>

<script>
  var scene = new THREE.Scene();

  var fov = 75;

  var height = 600;
  var width = 400;
  var aspect = height/width;

  var near = 1;
  var far = 1000;
  var camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
  camera.position.set(0, 0, 70);

  var renderer = new THREE.WebGLRenderer({
    preserveDrawingBuffer: true
  });
  renderer.setSize(height, width);
  document.body.appendChild(renderer.domElement);

  var color = 'white';
  var directionalLight = new THREE.DirectionalLight(color);
  directionalLight.position.set(0, 7, 10);
  scene.add(directionalLight);

  var geometry = new THREE.CubeGeometry(20, 20, 20);
  var material = new THREE.MeshPhongMaterial({ color: 'orange' });
  cube = new THREE.Mesh(geometry, material);
  cube.position.set(0, 0, 0);
  scene.add(cube);


  // Create a managed CubemapToEquirectangular
  var equiManaged = new CubemapToEquirectangular(renderer, true);


  function render() {
    requestAnimationFrame(render);

    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;

    renderer.render(scene, camera);
  }

  render();


  function capture() {
    equiManaged.update(camera, scene);
  }
</script>
</body>
</html>

